pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        sonars = tool 'sonar-scanner'
    }
    
    
    stages {
        stage('Git  CheckOut') {
            steps {
                git branch: 'main', credentialsId: 'gitremake', url: 'https://github.com/MehrankhanDevOps/CICD.git'
            }
        }
        stage('Versioning') {
            steps {
                sh 'mvn versions:set -DnewVersion=${BUILD_VERSION}-SNAPSHOT'
            }
        }        
        stage('Compile Code') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('File System Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-game.html .'
            }
        }    
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('idsonar')  {
                 sh '''$sonars/bin/sonar-scanner -Dsonar.projectName=Meragame -Dsonar.projectKey=Meragame -Dsonar.sources=.''' 
                }
            }
        }            
        stage('Quality Gate') {
            steps {
                 waitForQualityGate abortPipeline: false, credentialsId: 'idsonar' 
                }
            }
       stage('Build') {
            steps {
                 sh 'mvn package' 
                }
            }
        stage('Push to Nexus') {
            steps {
                 withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                sh 'mvn deploy'
                }
                }
            }
        stage('Docker Build') {
            steps {
                script{
                  // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh 'docker build -t mehrankhan091/maragame:latest .'
                }
                    }
                }
            }
        stage('Docker Image Scane') {
            steps {
                sh 'trivy image --skip-db-update --format table -o trivy-fs-image-game.html mehrankhan091/maragame:latest'
            }
        }
        stage('Docker Push') {
            steps {
                script{
                  // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh 'docker push  mehrankhan091/maragame:latest'
                }
                    }
                }
            }
        stage('Deploy to k8') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.114.128:6443') {
                sh 'kubectl apply -f deployment-service.yaml'
                }
                }
    }
}
}

